import crypto from "crypto";

// Ensure a fixed 32-byte (256-bit) secret key
function generateSecretKey() {
  return crypto.randomBytes(32).toString("hex"); // 64 hex characters
}

// Use a constant SECRET_KEY and ensure it's stored persistently
const SECRET_KEY_HEX = process.env.ENCRYPTION_SECRET;
const SECRET_KEY = Buffer.from(SECRET_KEY_HEX, "hex");

const IV_LENGTH = 16; // AES block size (16 bytes)

// Encrypt URL
export function encryptURL(url) {
  if (!url || typeof url !== "string") {
    throw new Error("‚ùå encryptURL() received an invalid URL.");
  }

  const iv = crypto.randomBytes(IV_LENGTH);

  const cipher = crypto.createCipheriv("aes-256-cbc", SECRET_KEY, iv);

  let encrypted = cipher.update(url, "utf8", "hex");
  encrypted += cipher.final("hex");
  console.log("Encrypted:", encrypted);
  return iv.toString("hex") + ":" + encrypted; // Ensure IV is stored
}

export function decryptURL(encrypted) {
  try {
    console.log("üîç decryptURL received:", encrypted);

    if (!encrypted || typeof encrypted !== "string") {
      throw new Error("‚ùå decryptURL() received an invalid input.");
    }

    const decodedToken = decodeURIComponent(encrypted);
    console.log("üîç Decoded Token:", decodedToken);

    if (!decodedToken.includes(":")) {
      throw new Error(
        "‚ùå Invalid encrypted data format. Expected format: IV:CipherText"
      );
    }

    const [ivHex, encryptedText] = decodedToken.split(":");

    if (!ivHex || !encryptedText) {
      throw new Error("‚ùå decryptURL() failed: Missing IV or ciphertext.");
    }

    console.log("üîç IV (Hex):", ivHex);
    console.log("üîç Encrypted Text (Hex):", encryptedText);

    const iv = Buffer.from(ivHex, "hex");

    if (iv.length !== 16) {
      throw new Error(
        `‚ùå Invalid IV length: ${iv.length}. It must be 16 bytes.`
      );
    }

    const decipher = crypto.createDecipheriv("aes-256-cbc", SECRET_KEY, iv);
    let decrypted = decipher.update(encryptedText, "hex", "utf8");
    decrypted += decipher.final("utf8");

    console.log("‚úÖ Decryption Successful:", decrypted);
    return decrypted;
  } catch (error) {
    console.error("‚ùå decryptURL() failed:", error.message);
    throw new Error("Decryption error: Invalid key, IV, or corrupted data.");
  }
}

//‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ URL ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ AES-256-CBC
// ‡∏ã‡∏∂‡πà‡∏á‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á URL ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
// ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ IV ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏≠‡∏µ‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏´‡∏ô‡∏∂‡πà‡∏á.
